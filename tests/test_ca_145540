#!/usr/bin/env ocamlscript
(* Thin lvhd tests *)
Ocaml.packs := ["lwt"; "xen-api-client.lwt"; "re"; "ezxmlm"; "lwt.preemptive"];
Ocaml.sources := ["../scripts/yorick.ml"; "test_common.ml"];
Ocaml.ocamlflags := ["-thread"]
--
open Yorick
open Lwt
open Xen_api
open Xen_api_lwt_unix
open Test_common

let meg = Int64.mul 1024L 1024L

let test_vdi_write state =
  let rpc = state.master_rpc in
  let size = Int64.mul 100L meg in
  let size_in_secs = Int64.div size 512L in
  let session_id = state.master_session in
  match state.iscsi_sr with
  | None -> failwith "No ISCSI SR"
  | Some (sr_ref, sr_uuid) ->
  let finished = ref false in
  Printf.printf "Creating VDI on SR %s...\n%!"  sr_uuid;
  VDI.create ~rpc ~session_id ~name_label:"test_vdi" ~name_description:""
    ~sR:sr_ref ~virtual_size:size
    ~_type:`user ~sharable:false ~read_only:false ~other_config:[] ~xenstore_data:[]
    ~sm_config:[] ~tags:[]
  >>= fun vdi ->
  let rec loop n =
    if !finished then Lwt.return () else begin
      let seek = Random.int64 (Int64.sub size_in_secs 4096L) in
      let count = Random.int64 4096L in
      Printf.printf "loop iter %d - dd seek=%Ld bs=512 count=%Ld\n%!" n seek count;
      Printf.printf "Writing to disk\n%!";
      with_vdi rpc session_id state vdi (fun device ->
          ?|~ "vagrant ssh host1 -c 'sudo dd if=/dev/urandom of=/dev/%s bs=512 seek=%Ld count=%Ld'" device seek count)
      >>= fun _ ->
      Printf.printf "Copying disk\n%!";
      VDI.copy ~rpc ~session_id ~vdi ~sr:sr_ref ~base_vdi:"" ~into_vdi:""
      >>= fun res ->
      VDI.destroy ~rpc ~session_id ~self:res
      >>= fun () ->
      loop (n+1)
    end
  in
  let rec snapshot snaps =
    if !finished then Lwt.return () else begin
      Printf.printf "Destroying all snapshot\n%!";
      Lwt_list.iter_s (fun self -> VDI.destroy ~rpc ~session_id ~self >>= fun () -> SR.scan ~rpc ~session_id ~sr:sr_ref) snaps >>= fun () ->
      Printf.printf "Taking a snapshot\n%!";
      Lwt.catch (fun () ->
          VDI.snapshot ~rpc ~session_id ~vdi ~driver_params:[]
          >>= fun snap -> Lwt.return (Some snap))
        (fun e -> Printf.printf "Caught exception: %s\n%!" (Printexc.to_string e); Lwt.return None)
      >>= fun snap ->
      Lwt_unix.sleep 5.0 >>= fun () ->
      match snap with
      | Some snap ->
        snapshot [snap]
      | None ->
        snapshot [] 
    end
  in
  let snapth = snapshot [] in
  let copyth = loop 0 in
  Lwt_unix.sleep 600.0 >>= fun () ->
  finished := true;
  snapth >>= fun () -> copyth
  
let _ =
  Random.self_init ();
  let th =
    update_box "host1";
    start_all 1;
    let hosts = get_hosts 1 in
    get_pool hosts
    >>= fun state ->
    get_iscsi_sr state
    >>= fun state ->
    Printf.printf "XXXX started\n%!";
    test_vdi_write state >>= fun _ ->
    Lwt.return ()
  in
  run_and_self_destruct th;

(* Local Variables: *)
(* mode: tuareg *)
(* End: *)
