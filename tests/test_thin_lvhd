#!/usr/bin/env ocamlscript
(* Thin lvhd tests *)
Ocaml.packs := ["lwt"; "xen-api-client.lwt"; "re"; "ezxmlm"];
Ocaml.sources := ["../scripts/yorick.ml"; "test_common.ml"]
--
open Yorick
open Lwt
open Xen_api
open Xen_api_lwt_unix
open Test_common

let test_vdi_write state =
  let rpc = state.master_rpc in
  let session_id = state.master_session in
  let allocation_quantum = 1 in
  let initial_allocation = 0 in
  match state.iscsi_sr with
  | None -> failwith "No ISCSI SR"
  | Some (sr_ref, sr_uuid) ->
    let sm_config = [
      "allocation_quantum", string_of_int allocation_quantum;
      "initial_allocation", string_of_int initial_allocation;
    ] in
    Printf.printf "Creating VDI on SR %s...\n%!"  sr_uuid;
    VDI.create ~rpc ~session_id ~name_label:"test_vdi" ~name_description:""
      ~sR:sr_ref ~virtual_size:(10737418240L) (* 10 gigs *)
      ~_type:`user ~sharable:false ~read_only:false ~other_config:[] ~xenstore_data:[]
      ~sm_config ~tags:[]
    >>= fun vdi ->
    with_vdi rpc session_id state vdi (fun device ->
      ?|~ "vagrant ssh host1 -c 'sudo /scripts/patterns.py /dev/%s 5368709120 write 3'" device)
     >>= fun () -> 
    (* Printf.printf "Copying VDI...\n%!"; *)
    (* VDI.copy ~rpc ~session_id ~vdi ~sr:sr_ref *)
    (* >>= fun new_vdi_ref -> *)
    (* with_vdi rpc session_id state new_vdi_ref (fun device -> *)
      (* ?|> "vagrant ssh host1 -c 'sudo md5sum /dev/%s'" device) *)
    (* >>= fun md5' -> *)
    (* Printf.printf "md5sum of copied VDI = %s\n%!" md5'; *)
    (* VDI.destroy ~rpc ~session_id ~self:new_vdi_ref >>= fun () -> *)
    VDI.destroy ~rpc ~session_id ~self:vdi >>= fun () ->
    Lwt.return ()

let plug_unplug_loop state =
  let rpc = state.master_rpc in
  let session_id = state.master_session in
  match state.iscsi_sr with
  | Some (sr, sr_uuid) ->
    SR.get_PBDs ~rpc ~session_id ~self:sr
    >>= fun pbds ->
    Lwt_list.map_s (fun r -> PBD.get_record ~rpc ~session_id ~self:r) pbds
    >>= fun pbd_records ->
    let pbd_ref_recs = List.combine pbds pbd_records in
    let (pbd_ref, pbd_rec) = List.find (fun (pref, prec) -> prec.API.pBD_host <> state.master) pbd_ref_recs in
    let is_plugged = pbd_rec.API.pBD_currently_attached in
    let rec loop is_plugged n =
      if n = 0
      then Lwt.return ()
      else begin
        (if is_plugged then PBD.unplug ~rpc ~session_id ~self:pbd_ref else PBD.plug ~rpc ~session_id ~self:pbd_ref)
        >>= fun () ->
        loop (not is_plugged) (n-1)
      end
    in
    loop is_plugged 10
  | _ ->
    Lwt.return ()

let _ =
  let th =
    update_box "host1";
    start_all 3;
    Printf.printf "XXXX started\n%!";
    let _ = setup_infra () in
    Printf.printf "XXXX setup_infra finished\n%!";
    let hosts = get_hosts 3 in
    get_pool hosts
    >>= fun state ->
    get_iscsi_sr state
    >>= fun state ->
    (match state.iscsi_sr with Some (_, uuid) -> Printf.printf "Got SR uuid: %s\n%!" uuid | None -> Printf.printf "No ISCSI SR!\n%!");
    test_vdi_write state
    >>= fun () ->
    plug_unplug_loop state
    >>= fun () ->
    Lwt.return ()
  in
  run_and_self_destruct th;

(* Local Variables: *)
(* mode: tuareg *)
(* End: *)
